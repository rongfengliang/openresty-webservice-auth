user root;  
worker_processes  1;
events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '$http_token'
                      '$cookie_ingress_uid';
    include       mime.types;
    default_type  application/octet-stream;
    gzip  on;
    rewrite_log on;
    log_subrequest on;
    real_ip_header     X-Forwarded-For;
    server {
       listen 81;
       charset utf-8;
       userid         on;
       userid_name    ingress_uid;
       userid_path    /;
       root html;
       userid_expires 365d;
       default_type text/html;
       location / {
            index  index.html;
       }
       location  /before_action {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is before content")
            ngx.log(ngx.ERR, "before_action")
            ngx.flush(true)
            ngx.exit(ngx.HTTP_OK)
          }
       }
       location  /after_action {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is after content")
            ngx.log(ngx.ERR, "after_action")
          }
       }
    }
    server {
       listen 80;
       charset utf-8;
       userid         on;
       userid_name    ingress_uid;
       userid_path    /;
       root html;
       userid_expires 365d;
       default_type text/html;
       location / {
            index  index.html;
       }
       location = /app.html {
          add_before_body /header.html;
          add_after_body  /footer.html;
       }
       location = /flush.html {
          # not working with request
          add_before_body /before_action;
          add_after_body  /after_action;
       }
       location  /before_action {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is before content")
            ngx.log(ngx.ERR, "before_action")
            ngx.flush(true)
            ngx.exit(ngx.HTTP_OK)
          }
       }
       location  /after_action {
         default_type text/html;
          content_by_lua_block {
             ngx.say("this is after content")
            ngx.log(ngx.ERR, "after_action")
            ngx.flush(true)
            ngx.exit(ngx.HTTP_OK)
          }
       }
       location = /footer.html {
           proxy_pass http://localhost:81;
       }
    }
}