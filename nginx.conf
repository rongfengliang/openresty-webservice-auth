user root;  
worker_processes  1;
events {
    worker_connections  1024;
}

http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"'
                      '$http_token'
                      '$cookie_ingress_uid';
    include       mime.types;
    default_type  application/octet-stream;
    gzip  on;
    rewrite_log on;
    proxy_ignore_client_abort on;
    log_subrequest on;
    real_ip_header     X-Forwarded-For;
    upstream backend {
      server 127.0.0.1:81       weight=5;
      zone upstream_dynamic 64k;
    } 
    server {
       listen 81;
       charset utf-8;
       userid         on;
       userid_name    ingress_uid;
       userid_path    /;
       root html;
       userid_expires 365d;
       default_type text/html;
       location / {
            index  index.html;
       }
       location  /before_action {
          default_type text/html;
          keepalive_timeout 0;
          content_by_lua_block {
            ngx.say("this is before content")
            ngx.log(ngx.ERR, "before_action")
            ngx.flush(true)
            ngx.exit(ngx.HTTP_OK)
          }
       }
       location /demoapp/mapping {
          content_by_lua_block {
            ngx.say("this is before content")
          }
       }
       location  /after_action {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is after content")
          }
       }
       location  /after_actionv4 {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is after content")
          }
       }
       location /after_actionv3 {
        return 200 'new content after v3 \n';
       }
    }
    server {
       listen 80;
       charset utf-8;
       userid         on;
       userid_name    ingress_uid;
       userid_path    /;
       root html;
       userid_expires 365d;
       default_type text/html;
       location / {
            index  index.html;
       }
       location ~* (.*)/mapping {
            proxy_pass http://localhost:81;
       }
       location /dalong/ {
         root html;
       }
       location /dalongv2/ {
         alias html/;
       }
       location = /app.html {
          addition_types *;
          add_before_body /header.html;
          add_after_body  /footer.html;
       }
       location /before_actionv2 {
        return 200 'new content before\n';
       }
        location /after_actionv2 {
            return 200 'new content after\n';
        }
       location = /flush.html {
          # not working with request
          add_before_body /before_actionv2;
          add_after_body  /after_actionv2;
       }
       location = /flush2.html {
          # not working with request
          add_before_body /before_action;
          add_after_body  /after_action;
       }
       location  /before_action {
          default_type text/html;
          content_by_lua_block {
            ngx.say("this is before content\n")
            ngx.log(ngx.ERR, "before_action")
          }
       }
       location  /after_action {
         default_type text/html;
         access_by_lua_block {
           ngx.ctx.userinfo = {
                name="dalongdemo",
                age=333
            }

         }
         body_filter_by_lua_block {               
              local mycjson = require("cjson")
              ngx.arg[1] = mycjson.encode(ngx.ctx.userinfo)
          }
       }
       location = /footer.html {
           proxy_pass http://backend;
       }
       location = /after_actionv3 {
           proxy_pass http://backend;
       }
       location = /after_actionv4 {
           proxy_pass http://backend;
       }
    }
}